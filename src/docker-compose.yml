version: "3.4"

# miau         docker-compose up
# logs         docker-compose -f docker-compose-logs.yml up

# front        http://localhost:3000/dashboard
# auth         http://localhost:5000/index.html
# notification http://localhost:5001/swagger/index.html
# agregation   http://localhost:5002/swagger/index.html
# workspace    http://localhost:5009/swagger/index.html

services:

  Elasticsearch:
    image: elasticsearch:7.16.2
    container_name: elasticsearch
    restart: always
    volumes:
    - elastic_data:/usr/share/elasticsearch/data/
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      discovery.type: single-node    
    ports:
    - '9200:9200'
    - '9300:9300'
    networks:
      - elk
      - app_elk

  Kibana:
    image: kibana:7.16.2
    container_name: kibana
    restart: always       
    ports:
    - '5601:5601'
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200  
    depends_on:
      - Elasticsearch  
    networks:
      - elk

  # -------------------------------------------------------
  front:
    container_name: ${COMPOSE_PROJECT_NAME}-front-web
    image: ${COMPOSE_PROJECT_NAME}-front-web
    environment:
      - NODE_ENV=production
    build:
      context: ../src/Webapp/
      dockerfile: Dockerfile
    ports:
      - "3000:8080"
  # -------------------------------------------------------
  auth:
    container_name: ${COMPOSE_PROJECT_NAME}-auth
    image: ${COMPOSE_PROJECT_NAME}-auth
    ports:
      - "5000:80"
    environment:
      - ConnectionStrings__DefaultConnection=Initial Catalog=AuthUsers; Data Source=auth-sql; Persist Security Info=True; User ID=SA; Password=Qwe123!@#; Trusted_Connection=True; MultipleActiveResultSets=true; TrustServerCertificate=True; Integrated Security=false
    depends_on:
      - auth-sql
    build:
      context: ../src/Services/AuthServer/
      dockerfile: Dockerfile
    tty: true
    restart: on-failure

  auth-sql:
    container_name: ${COMPOSE_PROJECT_NAME}-auth-sql
    image: "mcr.microsoft.com/mssql/server:2022-latest"
    ports:
      - "1433:1433"
    environment:
      - SA_PASSWORD=Qwe123!@#
      - ACCEPT_EULA=Y
    tty: true
    restart: on-failure
    volumes:
      - auth-db:/app/${COMPOSE_PROJECT_NAME}/auth/db
  # -------------------------------------------------------
  notification:
    container_name: ${COMPOSE_PROJECT_NAME}-notification
    image: ${COMPOSE_PROJECT_NAME}-notification
    ports:
      - "5001:5280"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5280
      - MongoDbConfiguration__ConnectionString=mongo://notification-mongo:27017
      - WorkspaceConfiguration__Endpoint=workspace:1412/workspaces/getworkspacesbyserverid
      - EventBusConfiguration__Connection=rabbitmq
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    build:
      context: ../src
      dockerfile: Services/Notification/Dockerfile
    depends_on:
      - notification-mongo
      - rabbitmq
      - workspace
      - Elasticsearch 
    tty: true
    restart: on-failure
    networks:
      - app_elk

  notification-mongo:
    container_name: ${COMPOSE_PROJECT_NAME}-notification-mongo
    image: mongo
    ports:
      - '27017:27017'
    volumes:
      - notification-db_data:/data/db
      - notification-db_config:/data/configdb
    tty: true
    restart: on-failure
  # -------------------------------------------------------
  agregation:
    container_name: ${COMPOSE_PROJECT_NAME}-agregation
    image: ${COMPOSE_PROJECT_NAME}-agregation
    build:
      context: ../src/Services/Agregation/
      dockerfile: Dockerfile
    depends_on:
      - agregation-postgre
    ports:
      - "5002:5278"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5278
      - ConnectionStrings__Postgre=Host=agregation-postgre;Port=5432;Database=MIAY;Username=postgres;Password=admin;Pooling=True;TrustServerCertificate=True
    tty: true
    restart: on-failure

  agregation-postgre:
    container_name: ${COMPOSE_PROJECT_NAME}-agregation-postgre
    image: postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=MIAY
    tty: true
    restart: on-failure
    volumes:
      - agregation-db:/var/lib/postgresql/data
  # -------------------------------------------------------
  workspace:
    container_name: ${COMPOSE_PROJECT_NAME}-workspace
    image: ${COMPOSE_PROJECT_NAME}-workspace
    ports:
      - "5009:5165"
    depends_on:
      - workspace-postgre
      - rabbitmq
    build:
      context: ../src
      dockerfile: Services/Workspace/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:5165
      - PostgreConfiguration__ConnectionString=Host=workspace-postgre;Port=5433;Username=postgres;Password=admin;Database=Workspace;Pooling=true;TrustServerCertificate=True
      - EventBusConfiguration__Connection=rabbitmq
    tty: true
    restart: on-failure

  workspace-postgre:
    container_name: ${COMPOSE_PROJECT_NAME}-workspace-postgre
    image: postgres
    ports:
      - "5433:5433"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=Workspace
    tty: true
    restart: on-failure
    volumes:
      - workspace-db:/var/lib/postgresql/data
    command: -p 5433
  # -------------------------------------------------------
  rabbitmq:
    container_name: ${COMPOSE_PROJECT_NAME}-rabbitmq
    image: rabbitmq:3-management-alpine
    restart: on-failure
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    ports:
      - 15672:15672
      - 5672:5672
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "5672" ]
      interval: 5s
      timeout: 10s
      retries: 3
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
  # -------------------------------------------------------
  #pgadmin:
  #  container_name: ${COMPOSE_PROJECT_NAME}-pgadmin4
  #  image: dpage/pgadmin4
  #  restart: on-failure
  #  environment:
  #    PGADMIN_DEFAULT_EMAIL: admin@admin.com
  #    PGADMIN_DEFAULT_PASSWORD: admin
  #    PGADMIN_LISTEN_PORT: 80
  #  ports:
  #    - "8009:80"
  #  volumes:
  #    - pgadmin-data:/var/lib/pgadmin
  # -------------------------------------------------------
  #web-aggregator:
  #  container_name: ${COMPOSE_PROJECT_NAME}-web-aggregator
  #  image: ${COMPOSE_PROJECT_NAME}-web-aggregator
  #  build:
  #    context: ../src/ApiGateways/WebAggregator/
  #    dockerfile: Dockerfile    
  #  ports:
  #    - "3001:8080"
  #  tty: true
  #  restart: on-failure
  #  volumes:
  #    - web-aggregator:/app/${COMPOSE_PROJECT_NAME}/web-aggregator
  # ---------------------------------------------------------

volumes:
  auth-db:
  notification-db_data:
  notification-db_config:
  agregation-db:
  workspace-db:
  pgadmin-data:
  elastic_data:
  rabbitmq-data:

networks:
  elk:
  app_elk:
