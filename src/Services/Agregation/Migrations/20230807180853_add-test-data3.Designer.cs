// <auto-generated />
using System;
using Agregation.Infrastructure.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Agregation.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20230807180853_add-test-data3")]
    partial class addtestdata3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Agregation.Domain.Models.Log", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreationDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CriticalStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ErrorState")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RecievedAt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ServerPatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ServerPatientId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Agregation.Domain.Models.ServerPatient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("ConnectionStatus")
                        .HasColumnType("boolean");

                    b.Property<string>("IconId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastSuccessLog")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("PingStatus")
                        .HasColumnType("boolean");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ServerPatients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d69cd87f-1f08-4b12-af16-980b003cdc5f"),
                            ConnectionStatus = true,
                            IconId = "1",
                            IdAddress = "testpatient-1",
                            LastSuccessLog = "2023-08-07 21:08:53",
                            Name = "testpatient1",
                            PingStatus = true,
                            Status = "Working"
                        },
                        new
                        {
                            Id = new Guid("d13920a2-4961-43cc-bd22-12187b19f512"),
                            ConnectionStatus = true,
                            IconId = "1",
                            IdAddress = "testpatient-2",
                            LastSuccessLog = "2023-08-07 21:08:53",
                            Name = "testpatient2",
                            PingStatus = true,
                            Status = "Working"
                        },
                        new
                        {
                            Id = new Guid("8d8a6029-676a-4e09-91c5-32c56602f67f"),
                            ConnectionStatus = true,
                            IconId = "1",
                            IdAddress = "testpatient-3",
                            LastSuccessLog = "2023-08-07 21:08:53",
                            Name = "testpatient3",
                            PingStatus = true,
                            Status = "Working"
                        });
                });

            modelBuilder.Entity("Agregation.Domain.Models.Log", b =>
                {
                    b.HasOne("Agregation.Domain.Models.ServerPatient", "ServerPatient")
                        .WithMany("Logs")
                        .HasForeignKey("ServerPatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServerPatient");
                });

            modelBuilder.Entity("Agregation.Domain.Models.ServerPatient", b =>
                {
                    b.Navigation("Logs");
                });
#pragma warning restore 612, 618
        }
    }
}
